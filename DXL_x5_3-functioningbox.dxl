// Lab 5.3 - Functional dialog box

/*
This script generates an Functional dialog that prints its contents.
*/

string crusts[] 	= {"Thin", "Hand-tossed", "Pan"}
string toppings[] 	= {"Cheese", "Pepperoni", "Beef", "Sausage", "Ham", "Mushroom"}
string methods[] 	= {"Eat-in", "Delivery", "Carry-out"}
DB  pizzaDB 		= create("Pizza Order", styleCentered)
DBE cNameDBE 		= field(pizzaDB, "Customer name", "John Doe", 20, false)
DBE dateLblDBE 		= label(pizzaDB, "Last ordered on:")
DBE oDateDBE 		= date(pizzaDB, 30, dateOf(0), true)
DBE oFrameDBE 		= frame(pizzaDB, "Order details", 300, 150)
DBE crustDBE 		= radioBox(pizzaDB, "Crust", crusts, 1)
DBE topDBE 			= multiList(pizzaDB, "Toppings", 200, 4, toppings, 6)
DBE whereDBE 		= choice(pizzaDB, "Order for", methods, 3, 20, 0, false)


void makePizza(DB winDB) 
{
    string cName = get(cNameDBE)
    string oDate = get(oDateDBE)
    int    cIdx = get(crustDBE)
    string crust = crusts[cIdx]
    string loc   = get(whereDBE)
    string tops
    print cName " would like a " crust " pizza with:\n"
    for tops in topDBE do 
    {
        print tops "\n"
    }
    print "for " loc " since they haven't had a pizza since " oDate "\n"
}

apply(pizzaDB, "Go", makePizza)
show(pizzaDB)
print "Not executed"




///////////////////////////////////////////////////////////////////////////
// Alt as functions

string crusts[] 	= {"Thin", "Hand-tossed", "Pan"}
string toppings[] 	= {"Cheese", "Pepperoni", "Beef", "Sausage", "Ham", "Mushroom"}
string methods[] 	= {"Eat-in", "Delivery", "Carry-out"}
DB  pizzaDB 		= null
DBE cNameDBE 		= null
DBE dateLblDBE 		= null
DBE oDateDBE 		= null
DBE oFrameDBE 		= null
DBE crustDBE 		= null
DBE topDBE 			= null
DBE whereDBE 		= null
void makePizza(DB)  = null

void createPizzaBox()
{
	pizzaDB 		= create("Pizza Order", styleCentered)
	cNameDBE 		= field(pizzaDB, "Customer name", "John Doe", 20, false)
	dateLblDBE 		= label(pizzaDB, "Last ordered on:")
	oDateDBE 		= date(pizzaDB, 30, dateOf(0), true)
	oFrameDBE 		= frame(pizzaDB, "Order details", 300, 150)
	crustDBE 		= radioBox(pizzaDB, "Crust", crusts, 1)
	topDBE 			= multiList(pizzaDB, "Toppings", 200, 4, toppings, 6)
	whereDBE 		= choice(pizzaDB, "Order for", methods, 3, 20, 0, false)
	apply(pizzaDB, "Go", makePizza)

	show(pizzaDB)
}

void makePizza(DB winDB) 
{
    string cName = get(cNameDBE)
    string oDate = get(oDateDBE)
    string crust = crusts[get(crustDBE)]
    string loc   = get(whereDBE)
    string tops
    print cName " would like a " crust " pizza with:\n"
    for tops in topDBE do 
    {
        print tops "\n"
    }
    print "for " loc " since they haven't had a pizza since " oDate "\n"
}

createPizzaBox

print "Not executed"


////////////////////////////////////////////////////////////////////////////////////////
// Alt. naming
DB  dbPizza    		= null		// The dialog box
DBE dbeCustNameFld  = null		// The customer name field
DBE dbeDateLbl 		= null		// The last order label
DBE dbeOrderDate   	= null		// The date picker
DBE dbeDetailsFrm	= null		// The frame
DBE dbeCrustRdo		= null		// The crust radio box
DBE dbeTopML		= null		// The toppings list
DBE dbeDeliveryCh   = null		// The delivery choice
DBE dbeFileName		= null		// The filepicker

string saCrusts[]   = {"Thin", "Hand-tossed", "Pan"}
string saToppings[] = {"Cheese", "Pepperoni",  "Beef", "Sausage",  "Ham", "Mushroom"} 
string saMethods[]  = {"Eat-in", "Delivery", "Carry-out"}

// Callback functions
void makePizza(DB winDB) 
{
	Buffer buf		 = create()
    string cName 	 = get(dbeCustNameFld)
    string sDate 	 = get(dbeOrderDate)	// use getDate to get the value as a Date
    int    iCrustIdx = get(dbeCrustRdo)
    string sCrust 	 = saCrusts[iCrustIdx]
    string sLoc   	 = get(dbeDeliveryCh)
    string sFileName = get(dbeFileName)
    string sTops
    
    buf +=  cName " would like a " sCrust " pizza with:\n"
    
    for sTops in dbeTopML do 
    {
        buf +=  sTops "\n"
    }
    buf +=  "for " sLoc " on " sDate "\n"
    
    Stream stmOut = write(sFileName)
    stmOut << stringOf(buf)
    close(stmOut)
    delete(buf)
    hide(winDB)
}

// Main
dbPizza 		= create("Pizza Order", styleCentered)
dbeCustNameFld 	= field(dbPizza, "Customer name", "John Doe", 20, false)
dbeDateLbl 		= label(dbPizza, "Last ordered on:")
dbeOrderDate   	= date( dbPizza, 30, dateAndTime(today), true)
dbeDetailsFrm	= frame(dbPizza, "Order details", 300, 150)
dbeCrustRdo		= radioBox(dbPizza, "Crust:  ", saCrusts, 1)
dbeTopML		= multiList(dbPizza, "Toppings", 200, 4, saToppings)
set(dbeTopML, 1)
dbeDeliveryCh   = choice(dbPizza, "Order for", saMethods, 3, 20, 0, false)
dbeFileName		= fileName(dbPizza, "c:/temp/pizza.dat", "*.dat|*.txt", "Pizza Files|Text Files")

apply(dbPizza, "Go", makePizza)
show(dbPizza)
